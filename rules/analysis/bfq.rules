#-*- mode: snakemake -*-
"""Rules for output to bfq pipeline. Main rule: bfq_all
"""
import glob


BFQ_INTERIM = join(INTERIM_DIR, 'microbiome', 'bfq')

rule bfq_taxonomy_log:
    input:
        viz = join(QIIME2_INTERIM, 'taxa_bar.qzv')
    params:
        outdir = join(BFQ_INTERIM, 'logs', 'taxa')
    singularity:
        'docker://' + config['docker']['qiime2'] 
    output:
        join(BFQ_INTERIM, 'logs', 'taxa', 'level-1.csv'),
        join(BFQ_INTERIM, 'logs', 'taxa', 'level-2.csv'),
        join(BFQ_INTERIM, 'logs', 'taxa', 'level-3.csv'),
        join(BFQ_INTERIM, 'logs', 'taxa', 'level-4.csv'),
        join(BFQ_INTERIM, 'logs', 'taxa', 'level-5.csv'),
        join(BFQ_INTERIM, 'logs', 'taxa', 'level-6.csv'),
        join(BFQ_INTERIM, 'logs', 'taxa', 'level-7.csv')
    shadow:
        'minimal'
    shell:
        'qiime tools export --input-path {input.viz} --output-path {params.outdir}'

checkpoint bfq_dada2_log_region:
    input:
        join(QIIME2_INTERIM, 'regions', '{region}', 'stats.qzv')
    params:
        outdir = join(BFQ_INTERIM, 'logs', 'dada2', '{region}')
    output:
       join(BFQ_INTERIM, 'logs', 'dada2', '{region}', 'metadata.tsv')
    singularity:
        'docker://' + config['docker']['qiime2'] 
    shadow:
        'minimal'
    shell:
        'qiime tools export --input-path {input} --output-path {params.outdir}'


def aggr_dada2_regions(wildcards):
    REGIONS = glob_wildcards(join(QIIME2_INTERIM, 'regions', '{region}', 'stats.qzv')).region
    file_list = expand(join(BFQ_INTERIM, 'logs', 'dada2', '{region}', 'metadata.tsv'), region=REGIONS)
    return file_list


rule bfq_dada2_log:
    input:
       aggr_dada2_regions
    output:
        temp(touch('.aggr.done'))


rule bfq_rpca:
    input:
        join(QIIME2_INTERIM, 'diversity', 'deicode_rpca.qza')
    output:
        join(BFQ_INTERIM, 'logs', 'deicode', 'ordination.txt')
    params:
        outdir = join(BFQ_INTERIM, 'logs', 'deicode')
    singularity:
        'docker://' + config['docker']['qiime2'] 
    shadow:
        'minimal'        
    shell:
        'qiime tools export --input-path {input} --output-path {params.outdir}'   


rule bfq_rpca_log:
    input:
        ord = join(BFQ_INTERIM, 'logs', 'deicode', 'ordination.txt'),
        sample_info = join(QIIME2_INTERIM, 'adata_samples.tsv')
    output:
        join(BFQ_INTERIM, 'logs', 'deicode', 'ordination_samples.txt')
    shell:
        """
        cat {input.ord} > {output}
        echo "Samples:" >> {output}
        cat {input.sample_info} >>  {output}
        """
        
rule bfq_exprs:
    input:
        physeq = join(QIIME2_INTERIM, 'physeq.rds'),
        biom = join(QIIME2_INTERIM, 'adata.biom'),
        table = join(QIIME2_INTERIM, 'adata.tsv'),
        seq = join(QIIME2_INTERIM, 'dna-sequences.fasta'),
        tree = join(QIIME2_INTERIM, 'tree.nwk'),
        feature_info = join(QIIME2_INTERIM, 'adata_features.tsv'),
        sample_info = join(QIIME2_INTERIM, 'adata_samples.tsv')
    params:
        outdir = join(BFQ_INTERIM, 'exprs')
    output:
        physeq = join(BFQ_INTERIM, 'exprs', 'physeq.rds'),
        biom = join(BFQ_INTERIM, 'exprs', 'table.biom'),
        table = join(BFQ_INTERIM, 'exprs', 'table.tsv'),
        seq = join(BFQ_INTERIM, 'exprs', 'dna-sequences.fasta'),
        tree = join(BFQ_INTERIM, 'exprs', 'tree.nwk'),
        feature_info = join(BFQ_INTERIM, 'exprs', 'taxonomy.tsv'),
        sample_info = join(BFQ_INTERIM, 'exprs', 'samples_info.tsv')
    run:
        for src, dst  in zip(input, output):
            shell('ln -sr {src} {dst}')


rule bfq_all:
    input:
        rules.bfq_exprs.output,
        rules.bfq_taxonomy_log.output,
        rules.bfq_dada2_log.output,
        rules.bfq_rpca_log.output
