#-*- mode: snakemake -*-
"""Snakemake rules for qiime2 workflow of 16S micriobiome data
"""
QIIME2_INTERIM = join(INTERIM_DIR, 'qiime2')
QIIME2_PROCESSED = join(PROCESSED_DIR, 'qiime2')

QIIME2_IMAGE = 'docker://qiime2/core:{}'.format(config['quant']['qiime2']['version'])

include:
    '../db/qiime2.db'

PE = len(config['read_geometry']) > 1

if PE:
    rule qiime2_manifest:
        input:
            R1 = expand(join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', '{sample}_R1.fastq'), sample=SAMPLES),
            R2 = expand(join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', '{sample}_R2.fastq'), sample=SAMPLES)
        output:
            join(QIIME2_INTERIM, 'qiime2_manifest.tsv')
        params:
            script = srcdir('scripts/make_manifest_qiime2.py')
        shell:
            '{params.script} {input} {output}'
else:
    rule qiime2_manifest:
        input:
            R1 = expand(join(FILTER_INTERIM, 'merged_fastq', 'trimmed', 'fastp', '{sample}_R1.fastq.gz'), sample=SAMPLES)
        output:
            join(QIIME2_INTERIM, 'qiime2_manifest.tsv')
        params:
            script = srcdir('scripts/make_manifest_qiime2.py')
        shell:
            '{params.script} {input} {output}'

rule qiime2_import:
    input:
        join(QIIME2_INTERIM, 'qiime2_manifest.tsv')
    output:
        join(QIIME2_INTERIM, 'artifacts', 'demultiplexed.qza')
    singularity:
        QIIME2_IMAGE
    params:
        input_format = 'PairedEndFastqManifestPhred33V2' if PE else 'SingleEndFastqManifestPhred33V2',
        type = 'SampleData[PairedEndSequencesWithQuality]' if PE else 'SampleData[SequencesWithQuality]'
    threads:
        1
    shell:
        'qiime tools import '
        '--type {params.type} '
        '--input-path {input} '
        '--output-path {output} '
        '--input-format {params.input_format} '

rule qiime2_demux_summary:
    input:
        join(QIIME2_INTERIM, 'artifacts', 'demultiplexed.qza')
    output:
        join(QIIME2_INTERIM, 'artifacts', 'demultiplexed.qzv')
    singularity:
        QIIME2_IMAGE    
    shell:
        'qiime demux summarize '
        '--i-data {input} '
        '--o-visualization {output} '

rule qiime2_quality_filter:
    input:
        join(QIIME2_INTERIM, 'artifacts', 'demultiplexed.qza'),
        join(QIIME2_INTERIM, 'artifacts', 'demultiplexed.qzv')
    output:
        filtered = join(QIIME2_INTERIM, 'filtered', 'filtered.qza'),
        stats = join(QIIME2_INTERIM, 'filtered', 'stats.qza')
    singularity:
        QIIME2_IMAGE
    shell:
        'qiime quality-filter q-score ' 
        '--i-demux {input} '
        '--o-filtered-sequences {output.filtered} '
        '--o-filter-stats {output.stats}'

rule qiime2_denoise_deblur:
    input:
        join(QIIME2_INTERIM, 'filtered', 'filtered.qza')
    output:
        rep_seqs = join(QIIME2_INTERIM, 'deblur', 'rep-seqs.qza'),
        table = join(QIIME2_INTERIM, 'deblur', 'table.qza'),
        stats = join(QIIME2_INTERIM, 'deblur', 'stats.qza')
    singularity:
        QIIME2_IMAGE
    params:
        trim_length = 250
    threads:
        48
    shell:
        'qiime deblur denoise-16S '
        '--p-trim-length {params.trim_length} '
        '--p-sample-stats '
        '--i-demultiplexed-seqs {input} '
        '--o-representative-sequences {output.rep_seqs} '
        '--o-table {output.table} '
        '--o-stats {output.stats} '     
        '--p-jobs-to-start {threads}'

rule qiime2_deblur_vis_stats:
    input:
        join(QIIME2_INTERIM, 'deblur', 'stats.qza')
    output:
        join(QIIME2_INTERIM, 'deblur', 'stats.qzv')
    singularity:
        QIIME2_IMAGE
    threads:
        1
    shell:
        'qiime deblur visualize-stats '
        '--i-deblur-stats {input} '
        '--o-visualization {output} '

rule qiime2_denoise_dada2:
    input:
        rules.qiime2_import.output
    output:
        rep_seq = join(QIIME2_INTERIM, 'dada2', 'rep-seqs.qza'),
        stats = join(QIIME2_INTERIM, 'dada2', 'stats.qza'),
        table = join(QIIME2_INTERIM, 'dada2', 'table.qza')
    singularity:
        QIIME2_IMAGE
    threads:
        48
    params:
        trim_f = config['quant']['dada2']['trim_f'],
        trim_r = config['quant']['dada2']['trim_r'],
        trunc_f = config['quant']['dada2']['trunc_f'],
        trunc_r = config['quant']['dada2']['trunc_r'],
        method = 'denoise-paired' if PE else 'denoise-single' 
    shell:
        'qiime dada2 {params.method} '
        '--i-demultiplexed-seqs {input} '
        '--p-trim-left-f {params.trim_f} '
        '--p-trim-left-r {params.trim_r} '
        '--p-trunc-len-f {params.trunc_f} '
        '--p-trunc-len-r {params.trunc_r} '
        '--o-table {output.table} '
        '--o-representative-sequences {output.rep_seq} '
        '--o-denoising-stats {output.stats} '
        '--p-n-threads {threads} '

rule qiime2_dada2_vis_stats:
    input:
        join(QIIME2_INTERIM, 'dada2', 'stats.qza')
    output:
        join(QIIME2_INTERIM, 'dada2', 'stats.qzv')
    singularity:
       QIIME2_IMAGE 
    shell:
        'qiime metadata tabulate '
        '--m-input-file {input} '
        '--o-visualization {output} '
    
rule qiime2_sample_info:
    input:
        join(PROCESSED_DIR, 'sample_info.tsv')
    output:
        join(QIIME2_INTERIM, 'sample_info.tsv')
    shell:
        'cp {input} {output} && '
        'sed -i -e "s/Sample_ID/sample-id/g" {output}'

rule qiime2_feature_table_summarize:
    input:
        sample_info = join(QIIME2_INTERIM, 'sample_info.tsv'),
        table = join(QIIME2_INTERIM, '{denoiser}', 'table.qza')
    output:
        join(QIIME2_INTERIM, '{denoiser}', 'table.qzv')
    singularity:
       QIIME2_IMAGE 
    shell:
        'qiime feature-table summarize '
        '--i-table {input.table} '
        '--o-visualization {output} '
        '--m-sample-metadata-file {input.sample_info}'

rule qiime2_feature_table_tabulate:
    input:
        join(QIIME2_INTERIM, '{denoiser}', 'rep-seqs.qza')
    output:
        join(QIIME2_INTERIM, '{denoiser}', 'rep-seqs.qzv')
    singularity:
       QIIME2_IMAGE 
    shell:
        'qiime feature-table tabulate-seqs '
        '--i-data {input} '
        '--o-visualization {output} '

rule qiime2_taxa:
    input:
        classifier = get_qiime2_prebuild_classifier,
        rep_seq = join(QIIME2_INTERIM, '{denoiser}', 'rep-seqs.qza')
    output:
        join(QIIME2_INTERIM, '{denoiser}', '{db}', 'taxonomy.qza')
    singularity:
       QIIME2_IMAGE
    threads:
        48
    shell:
        'qiime feature-classifier classify-sklearn '
        '--i-classifier {input.classifier} '
        '--i-reads {input.rep_seq} '
        '--o-classification {output} '
        '--p-n-jobs {threads}'

rule qiime2_taxa_barplot:
    input:
        table = 'data/processed/qiime2/{denoiser}/table.qza',
        taxa = 'data/processed/qiime2/{denoiser}/{db}/taxonomy.qza',
        sample_info = 'data/interim/qiime2/sample_info.txt'
    output:
        'data/processed/qiime2/{denoiser}/{db}/taxonomy.qzv'
    conda:
        'envs/qiime2.yml'
    threads:
        1
    shell:
        'qiime taxa barplot '
        '--i-table {input.table} '
        '--i-taxonomy {input.taxa} '
        '--m-metadata-file {input.sample_info} '
        '--o-visualization {output} '

rule qiime2_export_table_biom:
    input:
        table = 'data/processed/qiime2/{denoiser}/table.qza',
    output:
        table = temp('data/interim/qiime2/{denoiser}/exported/feature-table.biom'),
    conda:
        'envs/qiime2.yml'
    threads:
        1
    params:
        out_dir = 'data/interim/qiime2/{denoiser}/exported'
    shell:
        'qiime tools export {input.table} --output-dir {params.out_dir}'

rule qiime2_export_taxa_tsv:
    input:
        taxa = 'data/processed/qiime2/{denoiser}/{db}/taxonomy.qza'
    output:
        taxa =  temp('data/interim/qiime2/{denoiser}/exported/{db}/taxonomy.tsv')
    conda:
        'envs/qiime2.yml'
    threads:
        1
    params:
        out_dir = 'data/interim/qiime2/{denoiser}/exported/{db}'
    shell:
        'qiime tools export {input.taxa} --output-dir {params.out_dir}'
    
rule qiime2_alter_taxa_tsv_header:
    input:
        'data/interim/qiime2/{denoiser}/exported/{db}/taxonomy.tsv'
    output:
        'data/interim/qiime2/{denoiser}/exported/{db}/alter_taxa_header.done'
    threads:
        1
    shell:
        "sed -i -e 's/Feature ID\tTaxon\tConfidence/#OTUID\ttaxonomy\tconfidende/g' {input} && " 
        " touch {output}" 

rule qiime2_add_taxa_to_biom:
    input:
        biom = 'data/interim/qiime2/{denoiser}/exported/feature-table.biom',
        taxa = 'data/interim/qiime2/{denoiser}/exported/{db}/taxonomy.tsv',
        done = 'data/interim/qiime2/{denoiser}/exported/{db}/alter_taxa_header.done'
    output:
        'data/interim/qiime2/{denoiser}/exported/{db}/table_taxa.biom'
    conda:
        'envs/qiime2.yml'
    threads:
        1
    shell:
        'biom add-metadata -i {input.biom} -o {output} --observation-metadata-fp {input.taxa} --sc-separated taxonomy'


rule qiime2_sample_info_biom:
    input:
        'data/interim/qiime2/sample_info.txt'
    output:
        temp('data/interim/qiime2/sample_info_biom.txt')
    threads:
        1
    shell:
        'cp {input} {output} && '
        'sed -i -e "s/sample-id/#Sample ID/g" {output}'

rule qiime2_convert_biom:
    input:
        biom = 'data/interim/qiime2/{denoiser}/exported/{db}/table_taxa.biom',
        sample_info = 'data/interim/qiime2/sample_info_biom.txt'
    output:
        'data/processed/qiime2/{denoiser}/{db}/taxa.biom'
    conda:
        'envs/qiime2.yml'
    threads:
        1
    params:
        '--table-type="OTU table" --to-json'
    shell:
        'biom convert -i {input.biom} -o {output} {params} -m  {input.sample_info}'


rule qiime2_align:
    input:
        'data/processed/qiime2/{denoiser}/rep-seqs.qza'
    output:
        temp('data/interim/qiime2/{denoiser}/aligned-rep-seqs.qza')
    conda:
        'envs/qiime2.yml'
    threads:
        1
    shell:
        'qiime alignment mafft '
        '--i-sequences {input} '
        '--o-alignment {output} '

rule qiime2_align_mask:
    input:
        'data/interim/qiime2/{denoiser}/aligned-rep-seqs.qza'
    output:
        temp('data/interim/qiime2/{denoiser}/masked-aligned-rep-seqs.qza')
    conda:
        'envs/qiime2.yml'
    threads:
        1
    shell:
        'qiime alignment mask '
        '--i-alignment {input} '
        '--o-masked-alignment {output} '

rule qiime2_fasttree:
    input:
        'data/interim/qiime2/{denoiser}/masked-aligned-rep-seqs.qza'
    output:
        temp('data/interim/qiime2/{denoiser}/unrooted-tree.qza')
    conda:
        'envs/qiime2.yml'
    threads:
        1
    shell:
        'qiime phylogeny fasttree '
        '--i-alignment {input} '
        '--o-tree {output}'

rule qiime2_midpoint_root:
    input:
        'data/interim/qiime2/{denoiser}/unrooted-tree.qza'
    output:
        'data/processed/qiime2/{denoiser}/rooted-tree.qza'
    conda:
        'envs/qiime2.yml'
    threads:
        1
    shell:
        'qiime phylogeny midpoint-root '
        '--i-tree {input} '
        '--o-rooted-tree {output}'

rule qiime2_export_phylo_tree:
    input:
        'data/processed/qiime2/{denoiser}/rooted-tree.qza'
    output:
        'data/processed/qiime2/{denoiser}/phylo-tree/tree.nwk'
    conda:
        'envs/qiime2.yml'
    threads:
        1
    params:
        out_dir = 'data/processed/qiime2/{denoiser}/phylo-tree'
    shell:
        'qiime tools export {input} --output-dir {params.out_dir}'


rule qiime2_to_phyloseq:
    input:
        biom = 'data/processed/qiime2/{denoiser}/{db}/taxa.biom',
        tree = 'data/processed/qiime2/{denoiser}/phylo-tree/tree.nwk'
    output:
        'data/processed/qiime2/{denoiser}/{db}/physeq.rds'
    params:
        script = srcdir('scripts/qiime2_create_physeq.R')
    conda:
        'envs/dada2.yaml'
    shell:
        'Rscript {params.script} {input} {output}'



QIIME2_FILES = ['rep-seqs.qza','stats.qza','table.qza','rep-seqs-feature-tabulated.qzv','table-feature-summary.qzv','phylo-tree/tree.nwk']

QIIME2_DENOISERS = ['dada2','deblur']

QIIME2_DB = ['GG', 'SILVA']



rule qiime2_all:
    input:
        expand('data/processed/qiime2/{denoiser}/{file}',file=QIIME2_FILES,denoiser=QIIME2_DENOISERS),
        expand('data/processed/qiime2/{denoiser}/{db}/taxa.biom',denoiser=QIIME2_DENOISERS,db=QIIME2_DB),
        expand('data/processed/qiime2/{denoiser}/{db}/taxonomy.qzv',denoiser=QIIME2_DENOISERS,db=QIIME2_DB),
        expand('data/processed/qiime2/{denoiser}/{db}/physeq.rds',denoiser=QIIME2_DENOISERS,db=QIIME2_DB),
        'data/processed/qiime2/dada2/stats-metatab.qzv'

