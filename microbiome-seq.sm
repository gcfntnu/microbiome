#-*- mode: snakemake -*-
"""
This is a part of the pipeline utilities at Genomics Core Facility (GCF),  Trondheim

microbiome-seq
===================================
microbiome-seq Analysis Pipeline.

Documentation: https://github.com/flatberg/microbiome-seq
Authors:
Arnar Flatberg / flatberg <arnar.flatberg@ntnu.no>
"""


from os import environ
from os.path import abspath, join


GCFDB_DIR = environ.get('GCF_DB') or config.get('gcfdb_dir', 'src/gcfdb')
GCFDB_DIR = abspath(GCFDB_DIR)
include:
    join(GCFDB_DIR, 'utils.py')

extra_conf_fn = srcdir('microbiome-seq.config')
if os.path.exists(extra_conf_fn):
    with open(extra_conf_fn) as fh:
        c  = yaml.load(fh) or {}
        # original config will override extra config on shared items
        update_config2(config, c)

print(config)

#fixme: move this part
if LIBPREP['name'].lower().startswith('qiaseq'):
    # we cut 11 first bases in both reads
    read_geometry = config.get('read_geometry')
    if read_geometry:
        read_geometry = [int(i) for i in read_geometry]
        read_geometry[0] -= 11
        read_geometry[0] -= 11
        config['read_geometry'] = read_geometry

        
if not 'SAMPLES' in locals():
    SAMPLES = list(config.get('samples', {}).keys())

include:
    'rules/db.rules'
include:
    'rules/filter.rules'
include:
    'rules/quant.rules'
include:
    'rules/analysis.rules'



rule sample_info:
    output:
        join(INTERIM_DIR, 'sample_info.tsv')
    singularity:
        'docker://gcfntnu/python-base:3.7'
    params:
        script = srcdir('scripts/create_sampleinfo.py')
    shell:
        'python {params.script} config.yaml > {output}'

onsuccess:
    # write config
    from datetime import datetime
    import copy
    import yaml
    
    dt = datetime.now()
    final_conf_fn = 'rna-seq_{}_{}_{}.success.config'.format(dt.year, dt.month, dt.day)
    if os.path.exists(final_conf_fn):
        base_fn = copy.copy(final_conf_fn)
        for i in range(999):
            final_conf_fn = 'rna-seq_{}_{}_{}_#{}.success.config'.format(dt.year, dt.month, dt.day, i)
            if not os.path.exists(final_conf_fn):
                break
    if os.path.exists(final_conf_fn):
        raise ValueError('this is just too many runs on the same day')
    
    #with open(final_conf_fn, 'w') as fh:
    #    yaml.dump(config, fh, default_flow_style=False)
